# Lab setup #  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 


#Exam:
-------------------------------------
Understand and use essential tools
Operate running systems
Configure local storage
Create and Configure file system
Deploy,Configure and maintain systems
Manage Users and Groups
Manage security
-------------------------------------
# Understand the core cocept of Ansible:
Inventories
Variables
Modules
Facts
Plays
Playbooks
Configuration files

-------------------------------
# Configure Network

nmtui -> Edit connection -> enp0s3 -> Edit -> ipv4-Manual -> show and add IP address 192.168.56.10/24 - Automatically connect need to select -> ok -> Back -> Activate-Connection -> Back - setHostname -> ansible-c.example.com -> ok ->Quit 

To verify Hostname and Hostname resolution
# getent hosts mhost1.example.com

"Installing Ansible on Controll Node":
-----------------------------------------------------------
dnf install epel-release	To make epel available
-----------------------------------------------------------
dnf provides ansible 		To display ansible packages
-----------------------------------------------------------
dnf install ansible		Installing Ansible
-----------------------------------------------------------
ansible --version		Displying Ansible Version
-----------------------------------------------------------

"LAB-SETUP"
==============
# Next we need to setup ssh key authentication between Ansible-c &  other nodes

SSH key authentication for root user
------------------------------------
First we need to check whether we can able to connect remote node as root user after entering password
ssh -l root mhost1
if not able to login we need to edit /etc/ssh/sshd_config file in remote hosts
:/Password
:/Permit

# ssh-keygen -t rsa
# for host in 1 2 3 
# > do
# > ssh-copy-id mhost$host
# > done
------------------------------
After we did this configuration we can able to login to all the managed nodes from Ansible-c node without password as a root.

LAB-Setup COmpleted.....!!!!


"Core components of Ansible"
-----------------------------------------------------------------------------------------------
# Ansible Configuration file -> Define Varies default values to be used by Ansible
# Ansible inventories        -> Define hosts and group of hosts managed by Ansible
# Ansible module             -> Small python program which is desgned to specifiy some tasks 
# Ansible Variable           -> Variables used in Playbook
# Ansible Facts              -> Data about remote systems gathered by Ansible
# Ansible plays              -> 
# Ansible playbook           -> List of ansible plays 
-------------------------------------------------------------------------------------------------

"Exploring Ansible Config Files"
-------------------------------------------------------------
ANSIBLE_CONFIG              ---> Environment Variable if set 
ansibler.cfg                 ---> In current working directory
~/.ansible.cfg              ---> User's home directory
/etc/ansible/ansible.cfg    ---> System wide directory
-------------------------------------------------------------
pwd
/home/ansadmin
touch /tmp/ansible.cfg - Env set 
touch .ansible.cfg - User's home directory the . indicaets
touch ansible.cfg - current working directory means
so we have created two config files the one is /tmp and /home/ansadmin & 
Now exporting the ENVIRONMENT VARIABLE
"export ANSIBLE_CONFIG=/tmp/ansible.cfg"
ansible --version -> This Environment Variable have higher presitance 
"unset ANSIBLE_CONFIG"
ansible --version
Now it shows in home/ansadmin/".ansible.cfg" file because this is 2nd Highest presitance
If we delete .ansible.cfg and run ansible --version it will show current working directory "ansible.cfg"
If we delte both files in ansible --version shows system wide dirctory
Incase if we delete /etc/ansible/ansible.cfg -? if we enter ansible --version it shows config field "None"

in V9-ex294 -> we can initilize the ansible config file like the below 
$ ansible-config init --disabled > ansible.cfg

in ansible.cfg below are the directives we need to concentrate

[defaults]
inventory=/home/ansadmin/inventory
forks=5
remote_port=22
roles_path=/home/ansadmin/roles
host_key_checking = False  -> should be False
remote_user = ansadmin -> need to establish ssh connection for this user if your set this directive 
module_name=command 

[privilege_escalation]
become=True
become_method=sudo
become_user=root
become_ask_pass=False

[colors]

----------------------------------------------------------------------------------------------------------------------------
After add host entry in inventory file to validate 

# ansible mygroup --list-hosts
# ansible all --list-hosts



"With Password"
===============
# ansible all -m lineinfile -a "path=/etc/sudoers state=present line='ansadmin ALL=(ALL) ALL' backup=yes validate='/usr/sbin/visudo -cf %s'" -u root

# ansible all -m lineinfile -a "path=/etc/sudoers state=absent line='ansadmin ALL=(ALL) ALL' backup=yes validate='/usr/sbin/visudo -cf %s'" -u root

"WithOut Password"
=================
# ansible all -m lineinfile -a "path=/etc/sudoers state=present line='ansadmin ALL=(ALL) NOPASSWD: ALL' backup=yes validate='/usr/sbin/visudo -cf %s'" -u root
----------------------------------------------------------------------------------------------------------------------------
Display Banner on Managed NOdes:
---------------------------------
$ ansible all -m copy -a "content='Welcome to Ansible Managed Nods'  dest=/etc/motd" --become 



# 3.Important Defaults Used By Ansible 
======================================

# To define Host and Group Variables:
=====================================
To define "Hostvars" Create a file with the same as that of host
ex: "Define variable in inventory file"
vi /home/ansadmin/inventory
[hgroup1]
mhost1 ansible_user=ansadmin ansible_port=555 -> Host Variable
mhost2

[hgroup2]
mhost4
mhost5

[group2:vars]
ansible_user=ansadmin  --> Group Variable

"Store variable in seperate file:"Cereate a file with the name of host itself
----------------------------------------
/home/ansadmin/inventory/host_vars/mhost1 
---
ansible_user: ansadmin
ansible_port: 22
:wq
-----------------------------------------
/home/ansadmin/inventory/group_vars/
Create a file name same as group name below group_vars folder
vi hgroup2
ansible_user: ansadmin
ansible_port: 555
-----------------------------------------

"Display all the available modules and information about modules"
---------------------------------------------------------------------------
# ansible-doc -l  -> list all available module
# ansible-doc -l | grep ^win     --> To display all windows modules
# ansible-doc -l | grep v ^win   --> Display all module execpt windows module
# ansible-doc -l | grep ^file    --> Display module stars with the name file
# ansible-doc ping   --> All the information about specific ansible  module - This is your Good Firend in exam. 
-----------------------------------------------------------------------------


"ANSBLE AD-HOC COMMANDS"
=======================
---------------------------------------------------------------------
ansible mhost1 -m command -a "cat /etc/hosts"
ansble mhost1 -m copy -a "src=/etc/hosts dest=/tmp/hostsfile_backup"
ansible mhost2 -m file -a "path=/tmp/test state=touch"
ansible mhost3 -m user -a "name=test state=present"
----------------------------------------------------------------------

"ANSIBLE PLAY AND PLAYBOOKS"
===========================
Playbook comprsing different plays
Play contains below sections:
-----------------------------
"hosts"----------> To define target of the play and other directives like remote_user, become, gather_facts ...etc
"vars"-----------> To define variables
"tasks"----------> To define list of tasks to be executed
"handlers"-------> some task to be executed on successful change due to some other task in the section(task to run only when a change is made & successfull  on a machine)
"roles"----------> Roles to be included in the play
===============================================================================================================================

						"ANSIBLE-VARIABLES"
						===================
We know ansible written in YAML.
YAML supports dictionary variables, list variables and complex variable(Using dictionaries and List Both)
Dictionary Variable--> Key look for values 

# 13) Simple  Dictionary Variable example:
-------------------------------------------------------------------------------------------
vars:
    key: value

1) If we want to prit the assigned value in playbook with "jinja2" expresstion "{{key}}".
2) We will display the variable using "debug" module in playbook.
--------------------------------------------
- hosts: mhost1
  gather_facts: False
  vars:
      username: My-name-SenthilKumar 
  tasks:
    - name: Displaying variable value
      debug:
        msg: "{{username}}"
---------------------------------------------
-------------------------------------------------------------------------------------------
# 14) Named dictionary Variable:
The difference is only the name

vars:
  dict:
    key1: value1
    key2: value2

we can user jinja2 expression to print the assigned value in playbook
"{{dict}}"            ----> TO display/assigned the all values on the name
"{{dict	.key1}}"      ---> TO assign key1 value using dot notation
"{{dict['key1']}}"    ---> TO assing key1 value using bracket notation

# Example:
-----------------------------------------------
- hosts: mhost1
  vars:
    dict:
      key1: value1
      key2: value2
	
- hosts: mhost1
  gather_facts: False
  vars:
      dict:
        key1: value1
        key2: value2

  tasks:
    - name: Displaying variable value
      debug:
        msg: "{{ dict.key2 }}"
------------------------------------------
====================================================================================================


# 15) Named List Variable:

vars:
    list:
      - item1
      - item2
      - item3
--------------------------------------------
"Example":
==========
- hosts: mhost1	
  gather_facts: False
  vars:
      users:
        - name: Mark
          age: 35
        - name: List
          age: 30

  tasks:
    - name: Displaying variable value
      debug:
        msg: "{{ users[0]['age'] }}
-------------------------------------------

Jinja2 expression to reference variable in playbook
"{{ list} }"
"{{ list.0 }}"
"{{list [2] }}"

==================================================================================
# 16) Mixed Variables(Dict+List) with Playbook-Complex Variable:

vars:
   users:
     - name: Mark
       age: 35
     - name: lisa
       age: 32

Jinja2 experssion to reference variable in playbook
"{{ users }}"   -> To display list variables
"{{ users[0] }}" -> To display first item of the list
"{{ users[0].name }}" -> To display name in first list item.
"{{ users[0]['name'] }}"  -> To display name in first list itemA
---------------------------------------
- hosts: mhost1
  gather_facts: False
  vars:
      users:
        - name: Mark
          age: 35
        - name: List
          age: 30

  tasks:
    - name: Displaying variable value
      debug:
        msg: "{{ users[0]['age'] }}
---------------------------------------
=============================================================================================
# 17) Using YAML file to define variable:

vars_files:
	- vars_file.yaml

"vim vars_files"
---
users:
     - name: Mark
       age: 40
     - name: List
       age: 35
---


jinja2 expressions to reference variable in playbook.

"{{ users }}"   -> To display list variables
"{{ users[0] }}" -> To display first item of the list
"{{ users[0].name }}" -> To display name in first list item.
"{{ users[0]['name'] }}"  -> To display name in first list itemA

#----------------------------------------
- hosts: mhost1
  gather_facts: False
  vars_files:
        - vars_file.yml 

  tasks:
    - name: Displaying variable value
      debug:
        msg: "{{ users }}"
-----------------------------------------
=====================================================================================

# Variable provided during playbook excution:
=============================================

vars_prompt:
	- name: var
	  prompt: Enter variable
	  private: no

jinja2 expression to reference variables in playbook
"{{ var }}" - To display Variable


Example:
========

- hosts: mhost1
  gather_facts: False
  vars_prompt:
        - name: var
          prompt: Enter Variable
          private: No

  tasks:
        - name: Display Variable
          debug:
               msg: "{{ var }}"

Example-2:
=========
- hosts: mhost1
  gather_facts: False
  vars_prompt:
        - name: username 
          prompt: Enter UserName
          private: No

  tasks:
        - name: Create User
          user:
               name: "{{ username }}"
               state: present
=============================================================================================================================
#			                         "ANSIBLE FACTS"
                                                 ==============
Ansible facts are data/information related to your remote systems like OS,IP address aggigned on different interfaces, 
Hostname, disk , file system and more.
we can access this data in the ansible_facts variable
We can display ansible facts using "setup" module using ansible ad-hoc command
# ansible mhost1 -m setup 
# ansible mhost1 -m setup -a "filter=ansible....."
#

Note: keep in mind normal users can not display complete information of remote hosts, Execute command as root user to display
information about remote systems or with --become flack with normal user.

# ansible mhost1 -m setup 

In this setup module output on top-level we can see "ansible_facts" ---> Dictionary Variable - { - shows it dictionary 
further iteam with contains more dictionary iteams , list items and key:value pairs 

We can access different types of variables

Suppose if we want to print IP address of this mhost1 

We can create one simple playbook to understand facts variable , 
#PlayBook:
------------------------------------------------------------------
- hosts: mhost1
  become: true
  tasks:
      - name: Displaying facts variables
        debug:
          msg: "{{ ansible_facts.all_ipv4_addresses[2] }}"
          msg: "{{ ansible_nodename}}"                  ---- display nodename
          msg: "{{ ansible_facts.nodename }}"           ---- display nodename
          mst: "{{ ansible_facts['nodename'] }}"        ---- display nodename 

-------------------------------------------------------------------
#Ad-hoc:
========
# $ ansible mhost1 -m setup | grep ansible_   -> Here we can find many simple dictionary variable in the output
  "ansible_memfree_mb": 154,
        "ansible_memory_mb": {
        "ansible_memtotal_mb": 757,
        "ansible_mounts": [
        "ansible_nodename": "mhost1.example.com",
        "ansible_os_family": "RedHat",

# $ ansible mhost1 -m setup -a "filter=ansible_nodename"
# $ ansible mhost1 -m setup -a "filter=ansible_all_ipv4_addresses"

ansible_facts": {
        "ansible_all_ipv4_addresses": [
            "192.168.100.95",
            "10.0.2.15",
            "192.168.56.11"
===============================================================================================================================
#			        	SYSTEM ADMININSTRATION TASKS	
					============================
=================================
"Softwae Packages and repository"
"Services"
"Firewall Rules"
"File system"
"Sotrage System"
"File Content"
"Archiving"
"Scheduled Tasks"
"Security"
"User and Groups"
===================================

# Managing Services

Tasks:
	Install httpd service on webservers node
	Install mariadb service on prod node
	Make sure services are started and enables


"$ ansible localhost -m debug -a "var=vars"  ---Magical Variable of the control node to mange managed nodes 
This is totally different from setup module , 
"$ ansible localhost -m setup"
"$ ansible localhost -m setup | grep ansible_" 
















				



























			                         



